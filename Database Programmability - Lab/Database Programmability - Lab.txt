1.
CREATE FUNCTION ufn_count_employees_by_town(town_name VARCHAR (50))
RETURNS INT
DETERMINISTIC 
BEGIN
DECLARE e_count INT;
SET e_count := (SELECT COUNT(employee_id) FROM employees AS e
JOIN addresses AS a ON a.address_id = e.address_id
JOIN towns AS t ON t.town_id = a.town_id
WHERE t.name = town_name);
RETURN e_count;
END


2.
CREATE PROCEDURE usp_raise_salaries(department_name VARCHAR (50))
BEGIN
UPDATE employees AS e
JOIN departments AS d ON d.department_id = e.department_id
SET salary = salary * 1.05
WHERE d.name = department_name;
END


3.
CREATE PROCEDURE usp_raise_salary_by_id(id VARCHAR (50))
BEGIN
START TRANSACTION;
IF((SELECT COUNT(*) FROM employees WHERE employee_id LIKE id) = 0)
THEN
ROLLBACK;
ELSE UPDATE employees 
SET salary = salary * 1.05
WHERE employee_id = id;
END IF;
END


4.
CREATE TABLE deleted_employees(
`employee_id` INT PRIMARY KEY AUTO_INCREMENT,
`first_name` VARCHAR(20),
`last_name` VARCHAR(20),
`middle_name` VARCHAR(20),
`job_title` VARCHAR(50),
`department_id` INT,
`salary` DOUBLE
);

DELIMITER $$q
CREATE TRIGGER tr_deleted_employees
AFTER DELETE ON `employees`
FOR EACH ROW
BEGIN
INSERT INTO `deleted_employees` (`first_name`, `last_name`, `middle_name`, `job_title`, `department_id`, `salary`)
VALUES (OLD.first_name, OLD.last_name, OLD.middle_name, OLD.job_title, OLD.department_id, OLD.salary);
END $$q
