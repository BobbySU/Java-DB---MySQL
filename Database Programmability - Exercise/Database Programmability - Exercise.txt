1.
DELIMITER ### 
CREATE PROCEDURE usp_get_employees_salary_above_35000 ()
BEGIN
SELECT first_name, last_name FROM employees
WHERE salary > 35000
ORDER BY first_name, last_name, employee_id;
END
###



2.
DELIMITER ### 
CREATE PROCEDURE usp_get_employees_salary_above (salary_in DOUBLE(9,4))
BEGIN
SELECT first_name, last_name FROM employees
WHERE salary >= salary_in
ORDER BY first_name, last_name, employee_id;
END
###


3.
DELIMITER ### 
CREATE PROCEDURE usp_get_towns_starting_with (start_name TEXT)
BEGIN
SELECT `name` AS town_name FROM towns
WHERE `name` LIKE CONCAT(start_name,'%')
ORDER BY town_name;
END
###
DELIMITER ;


4.
DELIMITER ### 
CREATE PROCEDURE usp_get_employees_from_town (town_name VARCHAR(50))
BEGIN
SELECT e.first_name, e.last_name FROM employees AS e 
JOIN addresses AS a ON e.address_id = a.address_id
JOIN towns AS t ON a.town_id = t.town_id
WHERE t.`name` LIKE town_name
ORDER BY e.first_name, e.last_name, e.employee_id;
END
###
DELIMITER ;


5.
DELIMITER ### 
CREATE FUNCTION ufn_get_salary_level (salary DOUBLE)
RETURNS VARCHAR(10)
DETERMINISTIC 
BEGIN
RETURN (CASE
WHEN salary < 30000 THEN 'Low'
WHEN salary <= 50000 THEN 'Average'
ELSE 'High'
END
);
END
###
DELIMITER ;


6.
DELIMITER ### 
CREATE FUNCTION ufn_get_salary_level (salary DOUBLE)
RETURNS VARCHAR(10)
DETERMINISTIC 
BEGIN
RETURN (CASE
WHEN salary < 30000 THEN 'Low'
WHEN salary <= 50000 THEN 'Average'
ELSE 'High'
END
);
END;
###
DELIMITER ;

DELIMITER ### 
CREATE PROCEDURE usp_get_employees_by_salary_level (salary_level VARCHAR(50))
BEGIN
SELECT first_name, last_name FROM employees 
WHERE ufn_get_salary_level(salary) = salary_level
ORDER BY first_name DESC, last_name DESC;
END;
###
DELIMITER ;


7.
DELIMITER ### 
CREATE FUNCTION ufn_is_word_comprised (set_of_letters varchar(50), word varchar(50))
RETURNS BIT
DETERMINISTIC 
BEGIN
RETURN word REGEXP(CONCAT('^[', set_of_letters, ']+$'));
END;
###
DELIMITER ; 


8.
DELIMITER ### 
CREATE PROCEDURE usp_get_holders_full_name ()
BEGIN
SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM account_holders
ORDER BY full_name, id;
END;
###
DELIMITER ;

9.
DELIMITER ### 
CREATE PROCEDURE usp_get_holders_with_balance_higher_than (number_in DOUBLE)
BEGIN
SELECT h.first_name, h.last_name FROM account_holders AS h
JOIN accounts AS a ON h.id = a.account_holder_id
GROUP BY h.id
HAVING SUM(a.balance) > number_in
ORDER BY h.id;
END;
###
DELIMITER ;


10.
DELIMITER ### 
CREATE FUNCTION ufn_calculate_future_value (initial_sum DECIMAL(10,4), rate DOUBLE, years INT)
RETURNS DECIMAL(10,4)
DETERMINISTIC 
BEGIN
RETURN initial_sum * (POW(1+rate, years));
END;
###
DELIMITER ; 


11.
DELIMITER ### 
CREATE FUNCTION ufn_calculate_future_value (initial_sum DECIMAL(10,4), rate DOUBLE, years INT)
RETURNS DECIMAL(10,4)
DETERMINISTIC 
BEGIN
RETURN initial_sum * (POW(1+rate, years));
END;
###
DELIMITER ; 

DELIMITER ### 
CREATE PROCEDURE usp_calculate_future_value_for_account (account_id INT, rate DECIMAL(10,4))
BEGIN
SELECT a.id AS 'account_id', h.first_name, h.last_name, a.balance AS 'current_balance', 
ufn_calculate_future_value(a.balance, rate, 5) AS 'balance_in_5_years'
FROM account_holders AS h
JOIN accounts AS a ON h.id = a.account_holder_id
WHERE a.id = account_id;
END;
###
DELIMITER ;


12.
DELIMITER ###
CREATE PROCEDURE usp_deposit_money(
    account_id INT, money_amount DECIMAL(19, 4))
BEGIN
    IF money_amount > 0 THEN
        START TRANSACTION;
        UPDATE `accounts` AS a 
        SET a.balance = a.balance + money_amount
        WHERE a.id = account_id;
        IF (SELECT a.balance FROM `accounts` AS a 
            WHERE a.id = account_id) < 0
            THEN ROLLBACK;
        ELSE
            COMMIT;
        END IF;
    END IF;
END 
###
DELIMITER ;


13.
DELIMITER ###
CREATE PROCEDURE usp_withdraw_money(
    account_id INT, money_amount DECIMAL(19, 4))
BEGIN
    IF money_amount > 0 THEN
        START TRANSACTION;
        UPDATE `accounts` AS a 
        SET a.balance = a.balance - money_amount
        WHERE a.id = account_id;
        IF (SELECT a.balance 
            FROM `accounts` AS a 
            WHERE a.id = account_id) < 0
            THEN ROLLBACK;
        ELSE
            COMMIT;
        END IF;
    END IF;
END ###
DELIMITER ;


14.
DELIMITER ###
CREATE PROCEDURE usp_transfer_money(
    from_account_id INT, to_account_id INT, money_amount DECIMAL(19, 4))
BEGIN
    IF money_amount > 0 
        AND from_account_id <> to_account_id 
        AND (SELECT a.id 
            FROM `accounts` AS a 
            WHERE a.id = to_account_id) IS NOT NULL
        AND (SELECT a.id 
            FROM `accounts` AS a 
            WHERE a.id = from_account_id) IS NOT NULL
        AND (SELECT a.balance 
            FROM `accounts` AS a 
            WHERE a.id = from_account_id) >= money_amount
    THEN
        START TRANSACTION;
        UPDATE `accounts` AS a 
        SET a.balance = a.balance + money_amount
        WHERE a.id = to_account_id;
        UPDATE `accounts` AS a 
        SET a.balance = a.balance - money_amount
        WHERE a.id = from_account_id;
        IF (SELECT a.balance 
            FROM `accounts` AS a 
            WHERE a.id = from_account_id) < 0
            THEN ROLLBACK;
        ELSE
            COMMIT;
        END IF;
    END IF;
END ###
DELIMITER ;


15.
CREATE TABLE `logs` (
    log_id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
    account_id INT(11) NOT NULL,
    old_sum DECIMAL(19, 4) NOT NULL,
    new_sum DECIMAL(19, 4) NOT NULL
);

DELIMITER ###
CREATE TRIGGER `tr_balance_updated`
AFTER UPDATE ON `accounts`
FOR EACH ROW
BEGIN
    IF OLD.balance <> NEW.balance THEN 
    INSERT INTO `logs` (`account_id`, `old_sum`, `new_sum`)
	VALUES (OLD.id, OLD.balance, NEW.balance);
    END IF;
END ###
DELIMITER ;


16.
CREATE TABLE `logs` (
    log_id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
    account_id INT(11) NOT NULL,
    old_sum DECIMAL(19, 4) NOT NULL,
    new_sum DECIMAL(19, 4) NOT NULL
);

DELIMITER ###
CREATE TRIGGER `tr_balance_updated`
AFTER UPDATE ON `accounts`
FOR EACH ROW
BEGIN
    IF OLD.balance <> NEW.balance THEN 
    INSERT INTO `logs` (`account_id`, `old_sum`, `new_sum`)
	VALUES (OLD.id, OLD.balance, NEW.balance);
    END IF;
END ###
DELIMITER ;

CREATE TABLE notification_emails (
    `id` INT PRIMARY KEY AUTO_INCREMENT,
    `recipient` INT(11) NOT NULL,
    `subject` VARCHAR(50) NOT NULL,
    `body` VARCHAR(255) NOT NULL
);

DELIMITER ###
CREATE TRIGGER tr_notification_emails
AFTER INSERT ON `logs`
FOR EACH ROW
BEGIN
    INSERT INTO notification_emails (`recipient`, `subject`, `body`)
    VALUES (NEW.account_id, CONCAT('Balance change for account: ', NEW.account_id), 
        CONCAT('On ', DATE_FORMAT(NOW(), '%b %d %Y at %r'), ' your balance was changed from ', 
        ROUND(NEW.old_sum, 2), ' to ', ROUND(NEW.new_sum, 2), '.'));
END ###
DELIMITER ;

